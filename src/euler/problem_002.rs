// Problem 2: Even Fibonacci numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
// find the sum of the even-valued terms.

pub fn solve() {
    let target_number = 4_000_000;
    let result = sum_of_even_fibonacci(target_number);
    println!("The sum of even-valued terms in the Fibonacci sequence not exceeding {} is: {}", target_number, result);
}

fn sum_of_even_fibonacci(target: u32) -> u32 {
    let mut sum = 0;
    let mut a = 1;
    let mut b = 2;
    
    while b <= target {
        if b % 2 == 0 {
            sum += b;
        }
        let temp = b;
        b = a + b;
        a = temp;
    }
    sum
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sum_of_even_fibonacci_10() {
        let target = 10;
        let expected = 10;  // 2 + 8 = 10
        assert_eq!(sum_of_even_fibonacci(target), expected);
    }

    #[test]
    fn test_sum_of_even_fibonacci_60() {
        let target = 60;
        let expected = 44;  // 2 + 8 + 34 = 44
        assert_eq!(sum_of_even_fibonacci(target), expected);
    }

    #[test]
    fn test_sum_of_even_fibonacci_4000000() {
        let target = 4_000_000;
        let expected = 4613732;
        assert_eq!(sum_of_even_fibonacci(target), expected);
    }
}
